<<<<<<< HEAD
require "spec_helper"
require_relative './user_helper_spec.rb'

def some_photo
	"./spec/files/sean.jpeg"
end 
def create_new_product product
	fill_in "Title", with: product.title
	fill_in "Description", with: product.description
	fill_in "Price", with: product.price
	attach_file("Photo", some_photo)
	click_button "Submit"
end

def add_to_category product, category_name
	visit product_path(product)
	click_link "Add to category"
	fill_in "New category", with: category_name
	click_button "Submit"
end

def put_on_sale products
  products = [products] unless products.kind_of?(Array)
  visit sales_new_path
  fill_in "discount", with: '50'
  products.each do |p|
    check p.title
  end
  click_button "Submit"
end

describe "Administrator" do
	subject {page}
	context "managing products" do
		describe "creates product" do
			before(:each) do
				@product = FactoryGirl.build(:product)
				visit new_product_path
				create_new_product @product
			end

			it { should have_content("Successfully created product")}
			it { should have_short_product(@product)}
			it {@product.photo.should_not be_nil}

			describe "and modifies them" do 
				before(:each) do
					@product_2 = FactoryGirl.build(:product)
					pro = Product.where(title: @product.title).first
					visit edit_product_path(pro)
					create_new_product @product_2
				end

				it { should have_content("Successfully updated product")}
				it { should_not have_short_product(@product)}
				it { should have_short_product(@product_2)}
			end
		end

		describe "creates categories" do 
			before(:each) do
				@category_name = "Category_1"
				@product = FactoryGirl.create(:product)
				add_to_category @product, @category_name
				visit '/categories'
				click_link @category_name
			end

			it {should have_content(@category_name)}
			it {should have_short_product(@product)}
		end


    describe "assigns prdocuts to catgories" do
      before(:each) do
        categories = FactoryGirl.create_list(:category, 3)
        @add_to_product = categories[0,2]
        @not_added = categories[2]

        @product = FactoryGirl.create(:product)
        visit new_add_product_to_category_path(@product)
      end

      it "assign to more than one category" do
        @add_to_product.each do |category|
          check category.name 
        end
        click_button 'Submit'
        visit product_path(@product)
        @add_to_product.each do |category|
          should have_content(category.name)
        end
        should_not have_content(@not_added.name)
      end
    end

    it "Retire a product from being sold, which hides it from browsing by any non-administrator"

    context "sees a listing of all orders" do
      before(:each) do
        @user = FactoryGirl.create(:user)
        visit '/'
        login @user

        Order.statuses.each do |method, status|
          products =  FactoryGirl.create_list(:product, 2)
          order_some_products products
          order = Order.last
          order.send method
        end
        visit orders_path
      end

      it "checks lots of things" do 

      # it "the total number of orders by status" do
      %w{cancelled paid shipped returned}.each do |status|
        within(".orders .stats .#{status}"){ should have_content Order.count_by_status(status)}
      end
      # end
      # it {
      should have_link("Show order")
      # }
      # it 'filter orders to display by status type (for statuses "pending", "cancelled", "paid", "shipped", "returned")' do
      Order.statuses.each do |key, status| 
        other = Order.statuses.delete_if{|x| x == status}
        click_link status.capitalize
        other.each do |other_status|
          within(".order"){ should_not have_content(other_status) }
        end
        within(".order") do 
          should have_content(status) 
        end
        case status
        when 'pending'
        # it 'link to "cancel" individual orders which are currently "pending"'
        should have_link('Cancel')
        click_link  'Cancel'
        should have_content("Successfully updated order status to 'cancelled' ")
      when 'shipped'
        # it 'link to "mark as returned" individual orders which are currently "shipped"'
        should have_link('Mark as returned')
        click_link 'Mark as returned'
        should have_content("Successfully updated order status to 'returned'")
      when 'paid'
        # it 'link to "mark as shipped" individual orders which are currently "paid"'
        should have_link('Mark as shipped')
        click_link 'Mark as shipped'
        should have_content("Successfully updated order status to 'shipped")
      end
    end
      # end
      # context "and can access details of an individual order, including:" do
        # before(:each) do
        @order = Order.first
        @product = @order.products.first
        visit order_path(@order) 
        # end

        # it {
        should have_selector(".order .submit_date", text: @order.date_of_purchase.to_s)
       # }
        # it {
        should have_selector(".order .purchaser", text: @user.full_name)
       # }
        # it {
        should have_selector(".order .purchaser", text: @user.email)
       # }
        # it {
        within(".products .product .title"){ should have_link(@product.title)}
       # }
        # it {
        should have_selector( ".products .product .quantity", text: @product.quantity.to_s)
       # }
        # it {
        should have_selector( ".products .product .price", text: @product.price.to_s)
       # }
        # it {
        should have_selector( ".products .product .subtotal", text: @product.subtotal.to_s)
       # }
       # should have_selector(".products .product .discount", text: @product.discount)
        # it {
        should have_selector('.order .total_price', text: @order.total_price.to_s )
       # }
        # it {
        should have_selector('.order .status', text: @order.status )
       # }

        # it 'Update an individual order'

# context "On the order 'dashboard' they can:" do
#   context "View details of an individual order, including:" do

#    it "If purchased on sale, original price, sale percentage and adjusted price"
#    it "Subtotal for the order"
#    it "Discount for the order"
#    it "Total for the order reflecting any discounts from applicable sales"
#  end 
# end
        # it 'View and edit orders; may change quantity or remove products from orders with the status of pending or paid'
        # it 'Change the status of an order according to the rules as outlined above'
      # end
    end
  end
end

context "not allowed to" do
  it 'modify any personal data aside from their own'
end

context "he may" do
 context "create a sale" do

  before(:each) do
    @products = FactoryGirl.create_list(:product, 3)
    @category = ['Category_1']
    @products_in_category = @products[0,2]
    @products_in_category.each {|p| p.add_to_category @category.first}
    @product = @products.last

    visit sales_new_path
    fill_in "discount", with: '50'
  end

  it "for products" do
    @products_in_category.each do |p|
      check p.title
    end
    click_button "Submit"
    visit product_path(@products_in_category.last) 
    should have_selector(".price", text: (0.5*@products_in_category.last.price).to_s)
  end

  it "for categories" do
    check @category.first
    click_button "Submit"
    @products_in_category.each do |product| 
     visit product_path(product) 
     should have_selector(".price", text: (0.5*product.price).to_s), "#{page.find('body').native}"
   end
 end

 it "View a list of all active sales" do 
  put_on_sale @products_in_category
  visit sales_path
  should have_short_product(@products_in_category.first)
  should_not have_short_product(@product) 
end

it "End a sale" do
  put_on_sale @product
  visit sales_path
  within('.sale'){ click_link 'End sale'}
  visit sales_path
  should_not have_short_product(@product)
end
end

context "search orders using a builder-style interface (like Googleâ€™s 'Advanced Search;) allowing them to specify any of these:" do

  it 'Status (drop-down)'
  it 'Order total (drop-down for >, <, = and a text field for dollar-with-cents)'
  it 'Order date (drop-down for >, <, = and a text field for a date)'
  it 'Email address of purchaser'
end

end 
end
=======
 require "spec_helper"

 def create_new_product product
 	visit new_product_path
 	fill_in "Title", with: product.title
 	fill_in "Description", with: product.description
 	fill_in "Price", with: product.price
 	attach_file(product.photo)
 	click_button "Submit"
 end

 describe "Administrator" do
 	subject{page}
 	context "managing products" do
 		describe "creates products list" do 

 			before(:each) do
 				@new_product = FactoryGirl.build(:product)
 				create_new_product @new_product
 			end

 			it {should have_content("Successfully created product")}
 			it{ should have_selector('.product .title', text: @new_product.title)}
 			it{ should have_selector('.product .description', text: @new_product.description)}
 			it{ should have_selector('.product .price', text: @new_product.price.to_s)}
 			it{ find(".product .photo img").should have_link(@new_product.photo_url)}

 		end

 		it "Modify existing products title, description, price, and photo"
 		it "Create named categories for products"
 		it "Assign products to categories or remove them from categories. Products can belong to more than one category."
 		it "Retire a product from being sold, which hides it from browsing by any non-administrator"
 		it "As an Administrator, I can also view an order 'dashboard' where I can:"

 		context "See a listing of all orders with:" do
 			it "the total number of orders by status"
 			it "links for each individual order"
 			it 'filter orders to display by status type (for statuses "pending", "cancelled", "paid", "shipped", "returned")'
 			it 'link to transition to a different status:'
 			it 'link to "cancel" individual orders which are currently "pending"'
 			it 'link to "mark as returned" individual orders which are currently "shipped"'
 			it 'link to "mark as shipped" individual orders which are currently "paid"'

 		end
 		context "Access details of an individual order, including:" do
 			it 'Order date and time'
 			it 'Purchaser full name and email address'
 			it 'For each product on the order'
 			it 'Name with link to product page'
 			it 'Quantity'
 			it 'Price'
 			it 'Line item subtotal'
 			it 'Total for the order'
 			it 'Status of the order'
 			it 'Update an individual order'
 			it 'View and edit orders; may change quantity or remove products from orders with the status of pending or paid'
 			it 'Change the status of an order according to the rules as outlined above'
 		end
 	end

 	context "not allowed to" do
 		it 'modify any personal data aside from their own'
 	end

 	context "he may" do
 		context "put products or entire categories of products on sale. They can:" do

 			it "Create a 'sale' and connect it with individual products or entire categories"
 			it "Sales are created as a percentage off the normal price"
 			it "View a list of all active sales"
 			it "End a sale"

 		end
 		context "On the order 'dashboard' they can:" do
 			context "View details of an individual order, including:" do

 				it "If purchased on sale, original price, sale percentage and adjusted price"
 				it "Subtotal for the order"
 				it "Discount for the order"
 				it "Total for the order reflecting any discounts from applicable sales"
 			end 
 		end

 		context "search orders using a builder-style interface (like Googleâ€™s 'Advanced Search;) allowing them to specify any of these:" do

 			it 'Status (drop-down)'
 			it 'Order total (drop-down for >, <, = and a text field for dollar-with-cents)'
 			it 'Order date (drop-down for >, <, = and a text field for a date)'
 			it 'Email address of purchaser'
 		end 

 	end 
 end
>>>>>>> feature/specs_cleaning
